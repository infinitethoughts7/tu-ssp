name: Deploy TU-SSP to EC2

on:
  push:
    branches:
      - main  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Build frontend on GitHub (plenty of memory)
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build:prod
        
    # Prepare EC2 for deployment
    - name: Prepare EC2 for deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Create fresh dist directory
          rm -rf /home/ubuntu/tu-ssp/frontend/dist
          mkdir -p /home/ubuntu/tu-ssp/frontend/dist
          
    # Deploy built frontend to EC2
    - name: Deploy frontend build
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: "frontend/dist/*"
        target: "/home/ubuntu/tu-ssp/frontend/"
        strip_components: 2
        rm: false  # Safe since we cleared the directory above
        
    # Deploy backend and restart services
    - name: Deploy backend to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/tu-ssp
          
          # Pull latest code
          git pull origin main
          
          # Backend setup (no npm install here!)
          cd backend
          source venv/bin/activate
          pip install -r requirements.txt
          
          # Run migrations
          python manage.py migrate
          
          # Collect static files
          python manage.py collectstatic --noinput
          
          # Restart services
          sudo systemctl restart gunicorn
          sudo systemctl reload nginx
          
    # Optional: Health check (remove if still causing issues)
    - name: Health check
      run: |
        sleep 15
        curl -f http://${{ secrets.EC2_HOST }}/ || echo "Health check failed, but deployment completed"